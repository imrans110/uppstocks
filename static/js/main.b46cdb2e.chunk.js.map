{"version":3,"sources":["components/StockChart.js","components/StockModal.js","components/StockTable.js","utils/normalizeSocketResponse.js","components/NewWebSocket.js","views/Dashboard.js","utils/theme.js","App.js","reportWebVitals.js","index.js"],"names":["generateChartData","stockDetails","labels","map","stock","dayjs","date","format","datasets","label","data","value","toLocaleString","fill","backgroundColor","borderColor","options","scales","yAxes","ticks","beginAtZero","StockChart","React","memo","ModalExampleShorthand","Modal","trigger","Button","header","toUpperCase","content","actions","key","positive","StockTable","stockData","isPositive","length","Table","celled","Header","Row","HeaderCell","Body","Object","keys","negative","Cell","slice","StockModal","normalizeSocketResponse","newStockData","updatedStockData","newStockDataObj","forEach","push","Date","now","NewWebSocket","state","ws","timeout","connect","connectInterval","WebSocket","that","onopen","console","log","setState","clearTimeout","onclose","e","Math","min","reason","setTimeout","check","onerror","err","error","message","close","onmessage","normalizedData","JSON","parse","readyState","CLOSED","this","Children","props","children","child","cloneElement","Component","Dashboard","StyledSegment","Grid","Column","styled","Segment","theme","secondary","primary","tertiary","altPrimary","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b46cdb2e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport dayjs from \"dayjs\";\r\n\r\nconst generateChartData = (stockDetails) => {\r\n  const data = {\r\n    labels: stockDetails.map((stock) =>\r\n      dayjs(stock.date).format(\"DD MMM h:mm a\")\r\n    ),\r\n    datasets: [\r\n      {\r\n        label: \"# Stock Price \",\r\n        data: stockDetails.map((stock) => stock.value.toLocaleString()),\r\n        fill: false,\r\n        backgroundColor: \"rgb(255, 99, 132)\",\r\n        borderColor: \"rgba(255, 99, 132, 0.2)\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  return data;\r\n};\r\n\r\nconst options = {\r\n  scales: {\r\n    yAxes: [\r\n      {\r\n        ticks: {\r\n          beginAtZero: true,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst StockChart = ({ stockDetails }) => (\r\n  <>\r\n    <Line data={generateChartData(stockDetails)} options={options} />\r\n  </>\r\n);\r\n\r\nexport default React.memo(StockChart);\r\n","import React from \"react\";\r\nimport { Button, Modal } from \"semantic-ui-react\";\r\n\r\nimport StockChart from \"./StockChart\";\r\n\r\nfunction ModalExampleShorthand({ stockDetails, stock }) {\r\n  return (\r\n    <Modal\r\n      trigger={<Button>Show Details</Button>}\r\n      header={stock.toUpperCase() + \" Chart History\"}\r\n      content={<StockChart stockDetails={stockDetails} />}\r\n      actions={[{ key: \"done\", content: \"Close\", positive: true }]}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ModalExampleShorthand;\r\n","import React from \"react\";\r\nimport { Table } from \"semantic-ui-react\";\r\nimport dayjs from \"dayjs\";\r\n\r\nimport StockModal from \"./StockModal\";\r\n\r\nconst StockTable = ({ stockData }) => {\r\n  const isNegative = (stockDetails) => {\r\n    return (\r\n      stockDetails.length > 1 &&\r\n      stockDetails[stockDetails.length - 1].value <\r\n        stockDetails[stockDetails.length - 2].value\r\n    );\r\n  };\r\n\r\n  const isPositive = (stockDetails) => {\r\n    return (\r\n      stockDetails.length > 1 &&\r\n      stockDetails[stockDetails.length - 1].value >\r\n        stockDetails[stockDetails.length - 2].value\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Table celled>\r\n      <Table.Header>\r\n        <Table.Row>\r\n          <Table.HeaderCell>Ticker</Table.HeaderCell>\r\n          <Table.HeaderCell>Price</Table.HeaderCell>\r\n          <Table.HeaderCell>Last Update</Table.HeaderCell>\r\n          <Table.HeaderCell>Actions</Table.HeaderCell>\r\n        </Table.Row>\r\n      </Table.Header>\r\n\r\n      <Table.Body>\r\n        {Object.keys(stockData).map((stock) => (\r\n          <Table.Row\r\n            key={stock}\r\n            negative={isNegative(stockData[stock])}\r\n            positive={isPositive(stockData[stock])}\r\n          >\r\n            <Table.Cell>{stock.toUpperCase()} </Table.Cell>\r\n            <Table.Cell>\r\n              {stockData[stock].slice(-1)[0].value.toLocaleString()}\r\n            </Table.Cell>\r\n            <Table.Cell>\r\n              {dayjs(stockData[stock].slice(-1)[0].date).format(\r\n                \"DD MMM h:mm a\"\r\n              )}\r\n            </Table.Cell>\r\n            <Table.Cell>\r\n              <StockModal stockDetails={stockData[stock]} stock={stock} />\r\n            </Table.Cell>\r\n          </Table.Row>\r\n        ))}\r\n      </Table.Body>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default StockTable;\r\n","const normalizeSocketResponse = (stockData, newStockData) => {\r\n  const updatedStockData = { ...stockData };\r\n\r\n  const newStockDataObj = {};\r\n\r\n  for (let stock of newStockData) {\r\n    newStockDataObj[stock[0]] = stock[1];\r\n  }\r\n\r\n  Object.keys(newStockDataObj).forEach((key) => {\r\n    if (updatedStockData[key]) {\r\n      updatedStockData[key].push({\r\n        value: newStockDataObj[key],\r\n        date: Date.now(),\r\n      });\r\n    } else {\r\n      updatedStockData[key] = [\r\n        { value: newStockDataObj[key], date: Date.now() },\r\n      ];\r\n    }\r\n  });\r\n\r\n  return updatedStockData;\r\n};\r\n\r\nexport default normalizeSocketResponse;\r\n","import React, { Component } from \"react\";\r\n\r\nimport normalizeSocketResponse from \"../utils/normalizeSocketResponse\";\r\n\r\nclass NewWebSocket extends Component {\r\n  state = {\r\n    ws: null,\r\n    stockData: [],\r\n  };\r\n\r\n  // single websocket instance for the own application and constantly trying to reconnect.\r\n\r\n  componentDidMount() {\r\n    this.connect();\r\n  }\r\n\r\n  timeout = 250; // Initial timeout duration as a class variable\r\n\r\n  /**\r\n   * @function connect\r\n   * This function establishes the connect with the websocket and also ensures constant reconnection if connection closes\r\n   */\r\n  connect = () => {\r\n    var ws = new WebSocket(\"ws://stocks.mnet.website/\");\r\n    let that = this; // cache the this\r\n    var connectInterval;\r\n\r\n    // websocket onopen event listener\r\n    ws.onopen = () => {\r\n      console.log(\"connected websocket main component\");\r\n\r\n      this.setState({ ws });\r\n\r\n      that.timeout = 250; // reset timer to 250 on open of websocket connection\r\n      clearTimeout(connectInterval); // clear Interval on on open of websocket connection\r\n    };\r\n\r\n    // websocket onclose event listener\r\n    ws.onclose = (e) => {\r\n      console.log(\r\n        `Socket is closed. Reconnect will be attempted in ${Math.min(\r\n          10000 / 1000,\r\n          (that.timeout + that.timeout) / 1000\r\n        )} second.`,\r\n        e.reason\r\n      );\r\n\r\n      that.timeout = that.timeout + that.timeout; //increment retry interval\r\n      connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\r\n    };\r\n\r\n    // websocket onerror event listener\r\n    ws.onerror = (err) => {\r\n      console.error(\r\n        \"Socket encountered error: \",\r\n        err.message,\r\n        \"Closing socket\"\r\n      );\r\n\r\n      ws.close();\r\n    };\r\n\r\n    ws.onmessage = (data) => {\r\n      if (data && data.data) {\r\n        const normalizedData = normalizeSocketResponse(\r\n          this.state.stockData,\r\n          JSON.parse(data.data)\r\n        );\r\n        this.setState({ stockData: normalizedData });\r\n      }\r\n    };\r\n  };\r\n\r\n  /**\r\n   * utilited by the @function connect to check if the connection is close, if so attempts to reconnect\r\n   */\r\n  check = () => {\r\n    const { ws } = this.state;\r\n    if (!ws || ws.readyState === WebSocket.CLOSED) this.connect(); //check if websocket instance is closed, if so call `connect` function.\r\n  };\r\n\r\n  render() {\r\n    return React.Children.map(this.props.children, (child) => {\r\n      return React.cloneElement(child, { stockData: this.state.stockData });\r\n    });\r\n  }\r\n}\r\n\r\nexport default NewWebSocket;\r\n","import React from \"react\";\r\nimport { Grid, Segment } from \"semantic-ui-react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport StockTable from \"../components/StockTable\";\r\nimport NewWebSocket from \"../components/NewWebSocket\";\r\n\r\nconst Dashboard = () => {\r\n  return (\r\n    <div>\r\n      <StyledSegment>\r\n        <Grid>\r\n          <Grid.Row>\r\n            <Grid.Column>\r\n              <NewWebSocket>\r\n                <StockTable />\r\n              </NewWebSocket>\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </StyledSegment>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n\r\nconst StyledSegment = styled(Segment)`\r\n  background: ${(props) => props.theme.secondary} !important;\r\n`;\r\n","const theme = {\r\n  primary: \"#4C051E\",\r\n  secondary: \"#00293D\",\r\n  tertiary: \"#CED3DC\",\r\n  altPrimary: \"#556177\",\r\n};\r\n\r\nexport default theme;\r\n","import { ThemeProvider } from \"styled-components\";\n\nimport Dashboard from \"./views/Dashboard\";\nimport theme from \"./utils/theme\";\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Dashboard />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}