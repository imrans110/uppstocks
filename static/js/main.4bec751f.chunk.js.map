{"version":3,"sources":["components/StockChart.js","components/StockModal.js","components/StockTable.js","utils/helper.js","utils/normalizeSocketResponse.js","components/NewWebSocket.js","assets/Uppstocks.png","views/Dashboard.js","utils/theme.js","App.js","reportWebVitals.js","index.js"],"names":["generateChartData","stockDetails","labels","map","stock","dayjs","date","format","datasets","label","data","value","toLocaleString","fill","backgroundColor","borderColor","options","scales","yAxes","ticks","beginAtZero","StockChart","StockModal","Modal","trigger","Button","basic","StyledIcon","name","header","toUpperCase","content","actions","key","positive","styled","Icon","extend","relativeTime","ChangePercentage","negative","percentage","length","currentPrice","previousPrice","Math","floor","changePercentage","Label","color","StockTable","obj","stockData","Grid","centered","Row","Column","textAlign","tablet","mobile","StyledTable","celled","collapsing","Table","Header","HeaderCell","Body","Object","keys","constructor","Container","isPositive","Cell","style","width","slice","to","normalizeSocketResponse","newStockData","updatedStockData","newStockDataObj","forEach","push","Date","now","NewWebSocket","state","ws","timeout","connect","connectInterval","WebSocket","that","onopen","console","log","setState","clearTimeout","onclose","e","min","reason","setTimeout","check","onerror","err","error","message","close","onmessage","normalizedData","JSON","parse","readyState","CLOSED","this","React","Children","props","children","child","cloneElement","Component","Dashboard","StyledSegment","Image","src","UppstocksLogo","size","Segment","theme","secondary","primary","tertiary","altPrimary","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4bec751f.chunk.js","sourcesContent":["import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport dayjs from \"dayjs\";\n\nconst generateChartData = (stockDetails) => {\n  const data = {\n    labels: stockDetails.map((stock) =>\n      dayjs(stock.date).format(\"DD MMM h:mm a\")\n    ),\n    datasets: [\n      {\n        label: \"# Stock Price \",\n        data: stockDetails.map((stock) => stock.value.toLocaleString()),\n        fill: false,\n        backgroundColor: \"rgb(255, 99, 132)\",\n        borderColor: \"rgba(255, 99, 132, 0.2)\",\n      },\n    ],\n  };\n\n  return data;\n};\n\nconst options = {\n  scales: {\n    yAxes: [\n      {\n        ticks: {\n          beginAtZero: true,\n        },\n      },\n    ],\n  },\n};\n\nconst StockChart = ({ stockDetails }) => (\n  <>\n    <Line data={generateChartData(stockDetails)} options={options} />\n  </>\n);\n\nexport default StockChart;\n","import React from \"react\";\nimport { Button, Modal, Icon } from \"semantic-ui-react\";\nimport styled from \"styled-components\";\n\nimport StockChart from \"./StockChart\";\n\nconst StockModal = ({ stockDetails, stock }) => {\n  return (\n    <Modal\n      trigger={\n        <Button basic>\n          <StyledIcon name=\"eye\" />\n        </Button>\n      }\n      header={stock.toUpperCase() + \" Chart History\"}\n      content={<StockChart stockDetails={stockDetails} />}\n      actions={[{ key: \"done\", content: \"Close\", positive: true }]}\n    />\n  );\n};\n\nexport default StockModal;\n\nconst StyledIcon = styled(Icon)`\n  margin: 0 !important;\n`;\n","import React from \"react\";\nimport { Container, Table, Label, Grid } from \"semantic-ui-react\";\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\nimport styled from \"styled-components\";\n\nimport StockModal from \"./StockModal\";\nimport {\n  isObjectEmpty,\n  isNegative,\n  isPositive,\n  changePercentage,\n} from \"../utils/helper\";\n\ndayjs.extend(relativeTime);\n\nconst ChangePercentage = ({ stockDetails, negative, positive }) => {\n  if (negative || positive) {\n    const percentage = changePercentage(stockDetails);\n\n    return (\n      <Label color={percentage > 0 ? \"green\" : \"red\"}>\n        {`  (${[percentage]})`}{\" \"}\n      </Label>\n    );\n  }\n  return \"\";\n};\n\nconst StockTable = ({ stockData }) => {\n  return (\n    <Grid centered>\n      <Grid.Row centered>\n        <Grid.Column textAlign=\"center\" tablet={12} mobile={16}>\n          <StyledTable celled collapsing>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Ticker</Table.HeaderCell>\n                <Table.HeaderCell>Price (Change %)</Table.HeaderCell>\n                <Table.HeaderCell>Last Update</Table.HeaderCell>\n                <Table.HeaderCell textAlign=\"center\">Actions</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n              {isObjectEmpty(stockData) ? (\n                <Container> No Data </Container>\n              ) : (\n                Object.keys(stockData).map((stock) => {\n                  const negative = isNegative(stockData[stock]);\n                  const positive = isPositive(stockData[stock]);\n\n                  return (\n                    <Table.Row\n                      key={stock}\n                      negative={negative}\n                      positive={positive}\n                    >\n                      <Table.Cell>{stock.toUpperCase()} </Table.Cell>\n                      <Table.Cell>\n                        <Grid style={{ width: \"100%\" }}>\n                          <Grid.Row>\n                            <Grid.Column tablet={8} mobile={8}>\n                              {stockData[stock]\n                                .slice(-1)[0]\n                                .value.toLocaleString()}\n                            </Grid.Column>\n                            <Grid.Column tablet={8} mobile={8}>\n                              <ChangePercentage\n                                stockDetails={stockData[stock]}\n                                negative={negative}\n                                positive={positive}\n                              />\n                            </Grid.Column>\n                          </Grid.Row>\n                        </Grid>\n                      </Table.Cell>\n                      <Table.Cell>\n                        {dayjs().to(dayjs(stockData[stock].slice(-1)[0].date))}\n                      </Table.Cell>\n                      <Table.Cell textAlign=\"center\">\n                        <StockModal\n                          stockDetails={stockData[stock]}\n                          stock={stock}\n                        />\n                      </Table.Cell>\n                    </Table.Row>\n                  );\n                })\n              )}\n            </Table.Body>\n          </StyledTable>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  );\n};\n\nexport default StockTable;\n\nconst StyledTable = styled(Table)`\n  margin: auto !important;\n  width: 75% !important;\n  margin-top: 15px !important;\n`;\n","export const isObjectEmpty = (obj) =>\n  Object.keys(obj).length === 0 && obj.constructor === Object;\n\nexport const isNegative = (stockDetails) => {\n  return (\n    stockDetails.length > 1 &&\n    stockDetails[stockDetails.length - 1].value <\n      stockDetails[stockDetails.length - 2].value\n  );\n};\n\nexport const isPositive = (stockDetails) => {\n  return (\n    stockDetails.length > 1 &&\n    stockDetails[stockDetails.length - 1].value >\n      stockDetails[stockDetails.length - 2].value\n  );\n};\n\nexport const changePercentage = (stockDetails) => {\n  let percentage = \"\";\n  if (stockDetails.length > 1) {\n    const currentPrice = stockDetails[stockDetails.length - 1].value;\n    const previousPrice = stockDetails[stockDetails.length - 2].value;\n    if (currentPrice !== 0) {\n      if (previousPrice !== 0) {\n        percentage = ((currentPrice - previousPrice) / previousPrice) * 100;\n      } else {\n        percentage = currentPrice * 100;\n      }\n    } else {\n      percentage = -previousPrice * 100;\n    }\n  }\n  return Math.floor(percentage);\n};\n","const normalizeSocketResponse = (stockData, newStockData) => {\n  const updatedStockData = { ...stockData };\n\n  const newStockDataObj = {};\n\n  for (let stock of newStockData) {\n    newStockDataObj[stock[0]] = stock[1];\n  }\n\n  Object.keys(newStockDataObj).forEach((key) => {\n    if (updatedStockData[key]) {\n      updatedStockData[key].push({\n        value: newStockDataObj[key],\n        date: Date.now(),\n      });\n    } else {\n      updatedStockData[key] = [\n        { value: newStockDataObj[key], date: Date.now() },\n      ];\n    }\n  });\n\n  return updatedStockData;\n};\n\nexport default normalizeSocketResponse;\n","import React, { Component } from \"react\";\n\nimport normalizeSocketResponse from \"../utils/normalizeSocketResponse\";\n\nclass NewWebSocket extends Component {\n  state = {\n    ws: null,\n    stockData: [],\n  };\n\n  // single websocket instance for the own application and constantly trying to reconnect.\n\n  componentDidMount() {\n    this.connect();\n  }\n\n  timeout = 250; // Initial timeout duration as a class variable\n\n  /**\n   * @function connect\n   * This function establishes the connect with the websocket and also ensures constant reconnection if connection closes\n   */\n  connect = () => {\n    var ws = new WebSocket(\"ws://stocks.mnet.website/\");\n    let that = this; // cache the this\n    var connectInterval;\n\n    // websocket onopen event listener\n    ws.onopen = () => {\n      console.log(\"connected websocket main component\");\n\n      this.setState({ ws });\n\n      that.timeout = 250; // reset timer to 250 on open of websocket connection\n      clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n    };\n\n    // websocket onclose event listener\n    ws.onclose = (e) => {\n      console.log(\n        `Socket is closed. Reconnect will be attempted in ${Math.min(\n          10000 / 1000,\n          (that.timeout + that.timeout) / 1000\n        )} second.`,\n        e.reason\n      );\n\n      that.timeout = that.timeout + that.timeout; //increment retry interval\n      connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n    };\n\n    // websocket onerror event listener\n    ws.onerror = (err) => {\n      console.error(\n        \"Socket encountered error: \",\n        err.message,\n        \"Closing socket\"\n      );\n\n      ws.close();\n    };\n\n    ws.onmessage = (data) => {\n      if (data && data.data) {\n        const normalizedData = normalizeSocketResponse(\n          this.state.stockData,\n          JSON.parse(data.data)\n        );\n        this.setState({ stockData: normalizedData });\n      }\n    };\n  };\n\n  /**\n   * utilited by the @function connect to check if the connection is close, if so attempts to reconnect\n   */\n  check = () => {\n    const { ws } = this.state;\n    if (!ws || ws.readyState === WebSocket.CLOSED) this.connect(); //check if websocket instance is closed, if so call `connect` function.\n  };\n\n  render() {\n    return React.Children.map(this.props.children, (child) => {\n      return React.cloneElement(child, { stockData: this.state.stockData });\n    });\n  }\n}\n\nexport default NewWebSocket;\n","export default __webpack_public_path__ + \"static/media/Uppstocks.f9ff8a85.png\";","import React from \"react\";\nimport { Segment, Image } from \"semantic-ui-react\";\nimport styled from \"styled-components\";\n\nimport StockTable from \"../components/StockTable\";\nimport NewWebSocket from \"../components/NewWebSocket\";\nimport UppstocksLogo from \"../assets/Uppstocks.png\";\n\nconst Dashboard = () => {\n  return (\n    <StyledSegment textAlign=\"center\">\n      <Image src={UppstocksLogo} size=\"tiny\" centered />\n      <NewWebSocket>\n        <StockTable />\n      </NewWebSocket>\n    </StyledSegment>\n  );\n};\n\nexport default Dashboard;\n\nconst StyledSegment = styled(Segment)`\n  background: ${(props) => props.theme.secondary} !important;\n  min-height: 100% !important;\n`;\n","const theme = {\n  primary: \"#4C051E\",\n  secondary: \"rgb(36 55 67)\",\n  tertiary: \"#CED3DC\",\n  altPrimary: \"#556177\",\n};\n\nexport default theme;\n","import { ThemeProvider } from \"styled-components\";\n\nimport Dashboard from \"./views/Dashboard\";\nimport theme from \"./utils/theme\";\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Dashboard />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}