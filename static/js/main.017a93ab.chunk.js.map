{"version":3,"sources":["components/StockChart.js","components/StockModal.js","components/StockTable.js","utils/helper.js","utils/normalizeSocketResponse.js","components/NewWebSocket.js","views/Dashboard.js","utils/theme.js","App.js","reportWebVitals.js","index.js"],"names":["generateChartData","stockDetails","labels","map","stock","dayjs","date","format","datasets","label","data","value","toLocaleString","fill","backgroundColor","borderColor","options","scales","yAxes","ticks","beginAtZero","StockChart","React","memo","ModalExampleShorthand","Modal","trigger","Button","header","toUpperCase","content","actions","key","positive","StockTable","obj","stockData","isPositive","length","Table","celled","Header","Row","HeaderCell","Body","Object","keys","constructor","Container","negative","Cell","slice","StockModal","normalizeSocketResponse","newStockData","updatedStockData","newStockDataObj","forEach","push","Date","now","NewWebSocket","state","ws","timeout","connect","connectInterval","WebSocket","that","onopen","console","log","setState","clearTimeout","onclose","e","Math","min","reason","setTimeout","check","onerror","err","error","message","close","onmessage","normalizedData","JSON","parse","readyState","CLOSED","this","Children","props","children","child","cloneElement","Component","Dashboard","StyledSegment","Grid","Column","styled","Segment","theme","secondary","primary","tertiary","altPrimary","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kSAIMA,EAAoB,SAACC,GAgBzB,MAfa,CACXC,OAAQD,EAAaE,KAAI,SAACC,GAAD,OACvBC,IAAMD,EAAME,MAAMC,OAAO,oBAE3BC,SAAU,CACR,CACEC,MAAO,iBACPC,KAAMT,EAAaE,KAAI,SAACC,GAAD,OAAWA,EAAMO,MAAMC,oBAC9CC,MAAM,EACNC,gBAAiB,oBACjBC,YAAa,8BAQfC,EAAU,CACdC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,aAAa,OAOjBC,EAAa,SAAC,GAAD,IAAGpB,EAAH,EAAGA,aAAH,OACjB,mCACE,cAAC,OAAD,CAAMS,KAAMV,EAAkBC,GAAee,QAASA,OAI3CM,MAAMC,KAAKF,GCzBXG,MAXf,YAAyD,IAAxBvB,EAAuB,EAAvBA,aAAcG,EAAS,EAATA,MAC7C,OACE,cAACqB,EAAA,EAAD,CACEC,QAAS,cAACC,EAAA,EAAD,2BACTC,OAAQxB,EAAMyB,cAAgB,iBAC9BC,QAAS,cAAC,EAAD,CAAY7B,aAAcA,IACnC8B,QAAS,CAAC,CAAEC,IAAK,OAAQF,QAAS,QAASG,UAAU,OCsD5CC,EA1DI,SAAC,GAAmB,ICPTC,EDORC,EAAgB,EAAhBA,UASdC,EAAa,SAACpC,GAClB,OACEA,EAAaqC,OAAS,GACtBrC,EAAaA,EAAaqC,OAAS,GAAG3B,MACpCV,EAAaA,EAAaqC,OAAS,GAAG3B,OAI5C,OACE,eAAC4B,EAAA,EAAD,CAAOC,QAAM,EAAb,UACE,cAACD,EAAA,EAAME,OAAP,UACE,eAACF,EAAA,EAAMG,IAAP,WACE,cAACH,EAAA,EAAMI,WAAP,qBACA,cAACJ,EAAA,EAAMI,WAAP,oBACA,cAACJ,EAAA,EAAMI,WAAP,0BACA,cAACJ,EAAA,EAAMI,WAAP,2BAIJ,cAACJ,EAAA,EAAMK,KAAP,WCnCwBT,EDoCPC,ECnCO,IAA5BS,OAAOC,KAAKX,GAAKG,QAAgBH,EAAIY,cAAgBF,ODoC7C,cAACG,EAAA,EAAD,wBAEAH,OAAOC,KAAKV,GAAWjC,KAAI,SAACC,GAAD,OACzB,eAACmC,EAAA,EAAMG,IAAP,CAEEO,UAlCQhD,EAkCamC,EAAUhC,GAhCvCH,EAAaqC,OAAS,GACtBrC,EAAaA,EAAaqC,OAAS,GAAG3B,MACpCV,EAAaA,EAAaqC,OAAS,GAAG3B,OA+BhCsB,SAAUI,EAAWD,EAAUhC,IAHjC,UAKE,eAACmC,EAAA,EAAMW,KAAP,WAAa9C,EAAMyB,cAAnB,OACA,cAACU,EAAA,EAAMW,KAAP,UACGd,EAAUhC,GAAO+C,OAAO,GAAG,GAAGxC,MAAMC,mBAEvC,cAAC2B,EAAA,EAAMW,KAAP,UACG7C,IAAM+B,EAAUhC,GAAO+C,OAAO,GAAG,GAAG7C,MAAMC,OACzC,mBAGJ,cAACgC,EAAA,EAAMW,KAAP,UACE,cAACE,EAAD,CAAYnD,aAAcmC,EAAUhC,GAAQA,MAAOA,QAdhDA,GAjCE,IAACH,Y,8DEiBPoD,EAzBiB,SAACjB,EAAWkB,GAC1C,IAD2D,EACrDC,EAAgB,eAAQnB,GAExBoB,EAAkB,GAHmC,cAKzCF,GALyC,IAK3D,2BAAgC,CAAC,IAAxBlD,EAAuB,QAC9BoD,EAAgBpD,EAAM,IAAMA,EAAM,IANuB,8BAsB3D,OAbAyC,OAAOC,KAAKU,GAAiBC,SAAQ,SAACzB,GAChCuB,EAAiBvB,GACnBuB,EAAiBvB,GAAK0B,KAAK,CACzB/C,MAAO6C,EAAgBxB,GACvB1B,KAAMqD,KAAKC,QAGbL,EAAiBvB,GAAO,CACtB,CAAErB,MAAO6C,EAAgBxB,GAAM1B,KAAMqD,KAAKC,WAKzCL,GCkEMM,E,4MAnFbC,MAAQ,CACNC,GAAI,KACJ3B,UAAW,I,EASb4B,QAAU,I,EAMVC,QAAU,WACR,IAEIC,EAFAH,EAAK,IAAII,UAAU,6BACnBC,EAAI,eAIRL,EAAGM,OAAS,WACVC,QAAQC,IAAI,sCAEZ,EAAKC,SAAS,CAAET,OAEhBK,EAAKJ,QAAU,IACfS,aAAaP,IAIfH,EAAGW,QAAU,SAACC,GACZL,QAAQC,IAAR,2DACsDK,KAAKC,IACvD,IACCT,EAAKJ,QAAUI,EAAKJ,SAAW,KAHpC,YAKEW,EAAEG,QAGJV,EAAKJ,QAAUI,EAAKJ,QAAUI,EAAKJ,QACnCE,EAAkBa,WAAW,EAAKC,MAAOJ,KAAKC,IAAI,IAAOT,EAAKJ,WAIhED,EAAGkB,QAAU,SAACC,GACZZ,QAAQa,MACN,6BACAD,EAAIE,QACJ,kBAGFrB,EAAGsB,SAGLtB,EAAGuB,UAAY,SAAC5E,GACd,GAAIA,GAAQA,EAAKA,KAAM,CACrB,IAAM6E,EAAiBlC,EACrB,EAAKS,MAAM1B,UACXoD,KAAKC,MAAM/E,EAAKA,OAElB,EAAK8D,SAAS,CAAEpC,UAAWmD,O,EAQjCP,MAAQ,WAAO,IACLjB,EAAO,EAAKD,MAAZC,GACHA,GAAMA,EAAG2B,aAAevB,UAAUwB,QAAQ,EAAK1B,W,kEAjEpD2B,KAAK3B,Y,+BAoEG,IAAD,OACP,OAAO3C,IAAMuE,SAAS1F,IAAIyF,KAAKE,MAAMC,UAAU,SAACC,GAC9C,OAAO1E,IAAM2E,aAAaD,EAAO,CAAE5D,UAAW,EAAK0B,MAAM1B,mB,GA/EpC8D,a,sGCG3B,IAkBeC,EAlBG,WAChB,OACE,8BACE,cAACC,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAACA,EAAA,EAAK3D,IAAN,UACE,cAAC2D,EAAA,EAAKC,OAAN,UACE,cAAC,EAAD,UACE,cAAC,EAAD,iBAYVF,EAAgBG,YAAOC,IAAPD,CAAH,KACH,SAACT,GAAD,OAAWA,EAAMW,MAAMC,aCrBxBD,EAPD,CACZE,QAAS,UACTD,UAAW,UACXE,SAAU,UACVC,WAAY,WCSCC,MARf,WACE,OACE,cAAC,IAAD,CAAeL,MAAOA,EAAtB,SACE,cAAC,EAAD,OCISM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDZ,M","file":"static/js/main.017a93ab.chunk.js","sourcesContent":["import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport dayjs from \"dayjs\";\n\nconst generateChartData = (stockDetails) => {\n  const data = {\n    labels: stockDetails.map((stock) =>\n      dayjs(stock.date).format(\"DD MMM h:mm a\")\n    ),\n    datasets: [\n      {\n        label: \"# Stock Price \",\n        data: stockDetails.map((stock) => stock.value.toLocaleString()),\n        fill: false,\n        backgroundColor: \"rgb(255, 99, 132)\",\n        borderColor: \"rgba(255, 99, 132, 0.2)\",\n      },\n    ],\n  };\n\n  return data;\n};\n\nconst options = {\n  scales: {\n    yAxes: [\n      {\n        ticks: {\n          beginAtZero: true,\n        },\n      },\n    ],\n  },\n};\n\nconst StockChart = ({ stockDetails }) => (\n  <>\n    <Line data={generateChartData(stockDetails)} options={options} />\n  </>\n);\n\nexport default React.memo(StockChart);\n","import React from \"react\";\nimport { Button, Modal } from \"semantic-ui-react\";\n\nimport StockChart from \"./StockChart\";\n\nfunction ModalExampleShorthand({ stockDetails, stock }) {\n  return (\n    <Modal\n      trigger={<Button>Show Details</Button>}\n      header={stock.toUpperCase() + \" Chart History\"}\n      content={<StockChart stockDetails={stockDetails} />}\n      actions={[{ key: \"done\", content: \"Close\", positive: true }]}\n    />\n  );\n}\n\nexport default ModalExampleShorthand;\n","import React from \"react\";\nimport { Container, Table } from \"semantic-ui-react\";\nimport dayjs from \"dayjs\";\n\nimport StockModal from \"./StockModal\";\nimport { isObjectEmpty } from \"../utils/helper\";\n\nconst StockTable = ({ stockData }) => {\n  const isNegative = (stockDetails) => {\n    return (\n      stockDetails.length > 1 &&\n      stockDetails[stockDetails.length - 1].value <\n        stockDetails[stockDetails.length - 2].value\n    );\n  };\n\n  const isPositive = (stockDetails) => {\n    return (\n      stockDetails.length > 1 &&\n      stockDetails[stockDetails.length - 1].value >\n        stockDetails[stockDetails.length - 2].value\n    );\n  };\n\n  return (\n    <Table celled>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>Ticker</Table.HeaderCell>\n          <Table.HeaderCell>Price</Table.HeaderCell>\n          <Table.HeaderCell>Last Update</Table.HeaderCell>\n          <Table.HeaderCell>Actions</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n\n      <Table.Body>\n        {isObjectEmpty(stockData) ? (\n          <Container> No Data </Container>\n        ) : (\n          Object.keys(stockData).map((stock) => (\n            <Table.Row\n              key={stock}\n              negative={isNegative(stockData[stock])}\n              positive={isPositive(stockData[stock])}\n            >\n              <Table.Cell>{stock.toUpperCase()} </Table.Cell>\n              <Table.Cell>\n                {stockData[stock].slice(-1)[0].value.toLocaleString()}\n              </Table.Cell>\n              <Table.Cell>\n                {dayjs(stockData[stock].slice(-1)[0].date).format(\n                  \"DD MMM h:mm a\"\n                )}\n              </Table.Cell>\n              <Table.Cell>\n                <StockModal stockDetails={stockData[stock]} stock={stock} />\n              </Table.Cell>\n            </Table.Row>\n          ))\n        )}\n      </Table.Body>\n    </Table>\n  );\n};\n\nexport default StockTable;\n","export const isObjectEmpty = (obj) =>\n  Object.keys(obj).length === 0 && obj.constructor === Object;\n","const normalizeSocketResponse = (stockData, newStockData) => {\n  const updatedStockData = { ...stockData };\n\n  const newStockDataObj = {};\n\n  for (let stock of newStockData) {\n    newStockDataObj[stock[0]] = stock[1];\n  }\n\n  Object.keys(newStockDataObj).forEach((key) => {\n    if (updatedStockData[key]) {\n      updatedStockData[key].push({\n        value: newStockDataObj[key],\n        date: Date.now(),\n      });\n    } else {\n      updatedStockData[key] = [\n        { value: newStockDataObj[key], date: Date.now() },\n      ];\n    }\n  });\n\n  return updatedStockData;\n};\n\nexport default normalizeSocketResponse;\n","import React, { Component } from \"react\";\n\nimport normalizeSocketResponse from \"../utils/normalizeSocketResponse\";\n\nclass NewWebSocket extends Component {\n  state = {\n    ws: null,\n    stockData: [],\n  };\n\n  // single websocket instance for the own application and constantly trying to reconnect.\n\n  componentDidMount() {\n    this.connect();\n  }\n\n  timeout = 250; // Initial timeout duration as a class variable\n\n  /**\n   * @function connect\n   * This function establishes the connect with the websocket and also ensures constant reconnection if connection closes\n   */\n  connect = () => {\n    var ws = new WebSocket(\"ws://stocks.mnet.website/\");\n    let that = this; // cache the this\n    var connectInterval;\n\n    // websocket onopen event listener\n    ws.onopen = () => {\n      console.log(\"connected websocket main component\");\n\n      this.setState({ ws });\n\n      that.timeout = 250; // reset timer to 250 on open of websocket connection\n      clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n    };\n\n    // websocket onclose event listener\n    ws.onclose = (e) => {\n      console.log(\n        `Socket is closed. Reconnect will be attempted in ${Math.min(\n          10000 / 1000,\n          (that.timeout + that.timeout) / 1000\n        )} second.`,\n        e.reason\n      );\n\n      that.timeout = that.timeout + that.timeout; //increment retry interval\n      connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n    };\n\n    // websocket onerror event listener\n    ws.onerror = (err) => {\n      console.error(\n        \"Socket encountered error: \",\n        err.message,\n        \"Closing socket\"\n      );\n\n      ws.close();\n    };\n\n    ws.onmessage = (data) => {\n      if (data && data.data) {\n        const normalizedData = normalizeSocketResponse(\n          this.state.stockData,\n          JSON.parse(data.data)\n        );\n        this.setState({ stockData: normalizedData });\n      }\n    };\n  };\n\n  /**\n   * utilited by the @function connect to check if the connection is close, if so attempts to reconnect\n   */\n  check = () => {\n    const { ws } = this.state;\n    if (!ws || ws.readyState === WebSocket.CLOSED) this.connect(); //check if websocket instance is closed, if so call `connect` function.\n  };\n\n  render() {\n    return React.Children.map(this.props.children, (child) => {\n      return React.cloneElement(child, { stockData: this.state.stockData });\n    });\n  }\n}\n\nexport default NewWebSocket;\n","import React from \"react\";\nimport { Grid, Segment } from \"semantic-ui-react\";\nimport styled from \"styled-components\";\n\nimport StockTable from \"../components/StockTable\";\nimport NewWebSocket from \"../components/NewWebSocket\";\n\nconst Dashboard = () => {\n  return (\n    <div>\n      <StyledSegment>\n        <Grid>\n          <Grid.Row>\n            <Grid.Column>\n              <NewWebSocket>\n                <StockTable />\n              </NewWebSocket>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </StyledSegment>\n    </div>\n  );\n};\n\nexport default Dashboard;\n\nconst StyledSegment = styled(Segment)`\n  background: ${(props) => props.theme.secondary} !important;\n`;\n","const theme = {\n  primary: \"#4C051E\",\n  secondary: \"#00293D\",\n  tertiary: \"#CED3DC\",\n  altPrimary: \"#556177\",\n};\n\nexport default theme;\n","import { ThemeProvider } from \"styled-components\";\n\nimport Dashboard from \"./views/Dashboard\";\nimport theme from \"./utils/theme\";\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Dashboard />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}